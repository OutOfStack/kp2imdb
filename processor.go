package main

import (
	"errors"
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/xrash/smetrics"
)

const (
	similarityThreshold = 0.8
)

var (
	errNoRating     = errors.New("no rating")
	errNotFound     = errors.New("not found")
	errUpdateRating = errors.New("update rating")
	errOMDbApiLimit = errors.New("OMDb API limit")
)

type maybeIncorrectMovieError struct {
	title     string
	year      int
	searchAs  string
	imdbTitle string
	imdbID    string
}

func (e *maybeIncorrectMovieError) Error() string {
	return "maybe incorrect movie"
}

type processor struct {
	omdbClient *omdb
	imdbClient *imdb
}

func (p *processor) processMovie(m *movie) error {
	// skip entries without name and original name
	if m.Name == "" && m.OriginalName == "" {
		return nil
	}

	rating, _ := strconv.Atoi(m.Rating)
	if rating <= 0 || rating > 10 {
		return errNoRating
	}

	originalName := m.OriginalName
	if m.OriginalName == "" {
		originalName = m.Name
	}

	var year int
	if m.Year != "" {
		year, _ = strconv.Atoi(m.Year)
	}

	// search for the movie on omdb
	movieInfo, sErr := p.searchMovie(originalName, m.Name, year)
	var miv *maybeIncorrectMovieError
	if sErr != nil && !errors.As(sErr, &miv) {
		fmt.Printf("‚ùå '%s' (%s) not found\n", originalName, m.Year)
		return sErr
	}

	// set movie rating
	err := p.imdbClient.updateRating(movieInfo.IMDbID, rating)
	if err != nil {
		log.Printf("Error updating rating for %s: %v", originalName, err)
		return errUpdateRating
	}

	fmt.Printf("‚úÖ %s (%s), Rating: %s, IMDb Title: %s, IMDb link: https://www.imdb.com/title/%s\n", originalName, m.Year, m.Rating, movieInfo.Title, movieInfo.IMDbID)

	// return maybeIncorrectMovie in order to write potential incorrect movie into errors list
	return sErr
}

// searches for movie on omdb applying different alternating some movie data
func (p *processor) searchMovie(originalName, name string, year int) (omdbMovie, error) {
	// try to search by original name
	movieInfo, err := p.omdbClient.searchMovie(originalName, year)
	if err == nil && (movieInfo.Title == originalName) {
		return movieInfo, nil
	}
	if err != nil && !errors.Is(err, errNotFound) {
		log.Printf("Search '%s': %v", originalName, err)
		return omdbMovie{}, errOMDbApiLimit
	}

	// try to search by localized name
	searchAs := name
	movieInfo, err = p.omdbClient.searchMovie(searchAs, year)
	if err == nil && (movieInfo.Title == searchAs) {
		return movieInfo, nil
	}
	if err != nil && !errors.Is(err, errNotFound) {
		log.Printf("Search '%s': %v", searchAs, err)
		return omdbMovie{}, errOMDbApiLimit
	}

	// try to search by next year (often release year on imdb is 1 year later than on kp)
	if year != 0 {
		searchYear := year + 1
		movieInfo, err = p.omdbClient.searchMovie(originalName, searchYear)
		if err == nil && (movieInfo.Title == originalName || movieInfo.Title == name) {
			fmt.Printf("ü§î '%s' (%d) found on IMDb as '%s' (%d), link - https://www.imdb.com/title/%s. Check if it's correct\n",
				originalName, year, movieInfo.Title, searchYear, movieInfo.IMDbID)
			return movieInfo, &maybeIncorrectMovieError{title: originalName, year: year, searchAs: originalName, imdbTitle: movieInfo.Title, imdbID: movieInfo.IMDbID}
		}
		if err != nil && !errors.Is(err, errNotFound) {
			log.Printf("Search '%s': %v", originalName, err)
			return omdbMovie{}, errOMDbApiLimit
		}
	}

	// try to find by transliterated name. If not found, return original error
	searchAs = transliterateRussian(name)
	movieInfo, err = p.omdbClient.searchMovie(searchAs, year)
	if err != nil && !errors.Is(err, errNotFound) {
		log.Printf("Search '%s': %v", searchAs, err)
		return omdbMovie{}, errOMDbApiLimit
	}
	if errors.Is(err, errNotFound) {
		return omdbMovie{}, err
	}

	// decide if searchAs/original title are similar to result title.
	// there are some false positives in omdb results
	similarityX := smetrics.Jaro(searchAs, movieInfo.Title)
	similarityY := smetrics.Jaro(originalName, movieInfo.Title)
	if similarityX < similarityThreshold && similarityY < similarityThreshold {
		fmt.Printf("‚ùó'%s' (%d) searched as '%s', found as IMDb title - '%s', link - https://www.imdb.com/title/%s. Not rated because potentially incorrect\n",
			originalName, year, searchAs, movieInfo.Title, movieInfo.IMDbID)
		return omdbMovie{}, errNotFound
	}
	log.Printf("ü§î'%s' (%d) searched as '%s', found IMDb title - '%s'. Check if it's correct\n", originalName, year, searchAs, movieInfo.Title)

	return movieInfo, &maybeIncorrectMovieError{title: originalName, year: year, searchAs: searchAs, imdbTitle: movieInfo.Title, imdbID: movieInfo.IMDbID}
}

func getErrorMsg(err error, locale string) string {
	var mivErr *maybeIncorrectMovieError
	switch {
	case errors.Is(err, errNoRating) && locale == localeEn:
		return "Movie has no rating. Try to add it to Check-in list manually"
	case errors.Is(err, errNoRating) && locale == localeRu:
		return "–£ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏. –î–æ–±–∞–≤—å –≤ —Å–ø–∏—Å–æ–∫ Check-in –≤—Ä—É—á–Ω—É—é"
	case errors.Is(err, errNotFound) && locale == localeEn:
		return "Movie not found. Find and rate it manually"
	case errors.Is(err, errNotFound) && locale == localeRu:
		return "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ü–µ–Ω–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é"
	case errors.Is(err, errUpdateRating) && locale == localeEn:
		return "IMDb API error. Try to update session. If error persist, you're welcome to create an issue on github"
	case errors.Is(err, errUpdateRating) && locale == localeRu:
		return "–û—à–∏–±–∫–∞ IMDb API. –ü–æ–ø—Ä–æ–±—É–π –æ–±–Ω–æ–≤–∏—Ç—å –∫—É–∫–∏ IMDb –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å issue –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ"
	case errors.Is(err, errOMDbApiLimit) && locale == localeEn:
		return "OMDb API limit exceeded. Try again tomorrow"
	case errors.Is(err, errOMDbApiLimit) && locale == localeRu:
		return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OMDb. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≤—Ç—Ä–∞"
	case errors.As(err, &mivErr) && locale == localeEn:
		return fmt.Sprintf("Rating is added to IMDb, but check if movie is correct. Kinopoisk title - '%s' (%d), searched as '%s', IMDb title - '%s', Link - https://www.imdb.com/title/%s",
			mivErr.title, mivErr.year, mivErr.searchAs, mivErr.imdbTitle, mivErr.imdbID)
	case errors.As(err, &mivErr) && locale == localeRu:
		return fmt.Sprintf("–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ IMDb, –Ω–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ—Ü–µ–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª—å–º. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ö–ü - '%s' (%d), –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '%s', —Ñ–∏–ª—å–º –Ω–∞ IMDb - '%s', —Å—Å—ã–ª–∫–∞ - https://www.imdb.com/title/%s",
			mivErr.title, mivErr.year, mivErr.searchAs, mivErr.imdbTitle, mivErr.imdbID)
	default:
		return err.Error()
	}
}

func transliterateRussian(input string) string {
	// transliteration mapping for Russian characters
	transMap := map[rune]string{
		'–∞': "a", '–±': "b", '–≤': "v", '–≥': "g", '–¥': "d",
		'–µ': "e", '—ë': "yo", '–∂': "zh", '–∑': "z", '–∏': "i",
		'–π': "y", '–∫': "k", '–ª': "l", '–º': "m", '–Ω': "n",
		'–æ': "o", '–ø': "p", '—Ä': "r", '—Å': "s", '—Ç': "t",
		'—É': "u", '—Ñ': "f", '—Ö': "kh", '—Ü': "ts", '—á': "ch",
		'—à': "sh", '—â': "shch", '—ä': "", '—ã': "y", '—å': "",
		'—ç': "e", '—é': "yu", '—è': "ya",

		// Uppercase handling
		'–ê': "A", '–ë': "B", '–í': "V", '–ì': "G", '–î': "D",
		'–ï': "E", '–Å': "Yo", '–ñ': "Zh", '–ó': "Z", '–ò': "I",
		'–ô': "Y", '–ö': "K", '–õ': "L", '–ú': "M", '–ù': "N",
		'–û': "O", '–ü': "P", '–†': "R", '–°': "S", '–¢': "T",
		'–£': "U", '–§': "F", '–•': "Kh", '–¶': "Ts", '–ß': "Ch",
		'–®': "Sh", '–©': "Shch", '–™': "", '–´': "Y", '–¨': "",
		'–≠': "E", '–Æ': "Yu", '–Ø': "Ya",
	}

	var result strings.Builder
	for _, char := range input {
		// check if the character is a Russian letter
		if transliterated, exists := transMap[char]; exists {
			result.WriteString(transliterated)
		} else {
			// if not a Russian letter, keep the original character
			result.WriteRune(char)
		}
	}

	return result.String()
}
